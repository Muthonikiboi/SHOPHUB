// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the possible roles for a user
enum Role {
  ADMIN
  RETAILER
  SUPPLIER
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  password    String
  role        Role
  retailer    Retailer?  @relation(fields: [retailerId], references: [id])
  retailerId  Int?      @unique 
  supplier    Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId  Int?      @unique 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("users")
  Admin Admin[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stockLevel  Int
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  supplierId  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  OrderItem   OrderItem[]

  Supplier Supplier[] @relation("SupplierProducts")
}

model Supplier {
  id          Int        @id @default(autoincrement())
  name        String
  contactInfo String?   
  products    Product[]  @relation("SupplierProducts")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User? 

  Product Product[]
}

model Admin{
  id          Int        @id @default(autoincrement())
  name        String
  email       String
  contactInfo String?   
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  User User? @relation(fields: [Userid], references: [id])
  Userid Int?
}

model Retailer {
  id          Int        @id @default(autoincrement())
  name        String
  contactInfo String?   
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Define the relationship with Order model
  orders      Order[]    @relation("RetailerOrders") // Assuming a retailer can have multiple orders
  user        User?      // Optional: A retailer can have one associated user

  Order Order[]
}


model Order {
  id          Int        @id @default(autoincrement())
  retailer    Retailer   @relation(fields: [retailerId], references: [id])
  retailerId  Int
  status      OrderStatus
  items       OrderItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expectedDate DateTime? 

  Retailer Retailer[] @relation("RetailerOrders")
}


// Enum for order status
enum OrderStatus {
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELED
}

model OrderItem {
  id          Int        @id @default(autoincrement())
  order       Order      @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product    @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}